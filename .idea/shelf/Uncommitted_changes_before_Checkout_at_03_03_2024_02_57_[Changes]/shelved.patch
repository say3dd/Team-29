Index: Valhalla/app/Http/Controllers/Product/ProductController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n//@noramknarf (Francis Moran) - getInfo() function\n/* @KraeBM (Bilal Mohamed) worked on this page (pageupdate function) */\nnamespace App\\Http\\Controllers;\nnamespace App\\Http\\Controllers\\Product;\n\nuse App\\Models\\Basket;\nuse App\\Models\\Product;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Http\\Controllers\\BasketService\\BasketInterface;\n\nclass ProductController extends Controller implements BasketInterface\n{\n//  public function productList()\n//   {\n//       //mistake fixed\n//       $products = Product::all();\n//      return view('product', compact('products'));\n//   }\n    /* this function is used to show the product page **/\n    public function pageUpdate(Request $request,$id){\n        /** Assigning laptop as all products before its populated so laptop is definine din all tables before filled.*/\n\n        $products = Product::all();\n        /** Assigning the variables to the product coloums and making them distinct so theres no repetition */\n        $brands = Product::select('brand')->distinct()-> orderby('brand')-> get();\n        $graphics = Product::select('GPU')->distinct()-> orderby('GPU')-> get();\n\n\n    /**Assigning opartions for if there are no filters chosen or\n     * if both filters are chosen - here both selected in the request */\n    $checkedBrands = $request-> get('brands',[]);\n    $checkedGPU = $request -> get('graphics',[]);\n\n    /* if statements on whether both ticked or one ticked **/\n    if(!empty($checkedBrands)&& !empty($checkedGPU)){\n       $products =  Product::whereIn('brand',$checkedBrands)\n            -> whereIn('GPU',$checkedGPU)->get();\n    }\n    elseif(!empty($checkedBrands)){\n        $products = Product::whereIn('brand',$checkedBrands)->get();\n    }\n    elseif(!empty($checkedGPU)){\n        $products = Product::whereIn('GPU',$checkedGPU)->get();\n    }\n        /** The page update page works on making sure the products are displayed and each page works,  */\n\n\n    switch($id){\n    case 1:\n    return view('Product_files.products', [\n        'products' => $products,\n        'brands' => $brands,\n        'graphics' => $graphics,\n    ]);\n    case 2:\n        return view('Product_files.products2', [\n            'products' => $products,\n            'brands' => $brands,\n            'graphics' => $graphics,\n        ]);\n        case 3:\n            return view('Product_files.products3', [\n                'products' => $products,\n                'brands' => $brands,\n                'graphics' => $graphics,\n            ]);\n            default:\n             return redirect()->back();\n    }\n    }\n    public function getInfo(Request $request)\n    {\n        /* had to restate these and put assign them within view since it returns an Undefined variable $brands/$graphics issue **/\n        $brands = Product::select('brand')->distinct()-> orderby('brand')-> get();\n        $graphics = Product::select('GPU')->distinct()-> orderby('GPU')-> get();\n\n        $productID = request()->input('productData'); //grabs specifically the section of the request that holds the laptop's ID\n        if($productID != '' && Auth::id() != null){\n            $product_data = DB::table('products')->where('product_id', $productID)->first();\n\n            $basket = Basket::create([\n                'user_id' => Auth::id(),\n                'product_id' => $productID,\n                'product_name' => $product_data->laptop_name,\n                'product_price' => $product_data->price,\n                'image_path' =>$product_data->image_path,\n                'RAM' => $product_data->RAM,\n                'GPU' => $product_data->GPU,\n                'processor' => $product_data->processor\n            ]);\n            /* In summary, $laptopID is the id passed to the controller by the products page,\n            $product_data is the entire row from the products table for that product, any info needed can be accessed with -> then the column name in the products table\n            I would have rather kept the specs somewhere else to prevent clutter but it's slightly more reliable just expanding the table and passing as usual*/\n       }\n          $products = Product::all();\n       /*Scroll position set to the poisition of the user input */\n       /*Sets the restore scroll originally to true, if its true, then page refreshes from the top, if not continues by using\n       the saved Scroll positon */\n       $scrollPosition = $request->input('scrollPosition');\n       session(['scrollPosition' => $scrollPosition, 'restoreScroll' => true]);\n       return redirect()->back();\n    }\n\n    // @say3dd (Mohammed Miah) displays all the products, maximum of 12 on the products page\n    public function index()\n    {\n        $products = Product::paginate(12);\n         return view('Product_files.product', compact('products'));\n\n    }\n\n\n\n    // @say3dd (Mohammed Miah) Function to show a maximum of 4 products on the home page, namely the \"Our Laptops\" section.\n\n\n    // @say3dd (Mohammed Miah) Function to allow us to see related products on the individual product details page\n    public function show($id)\n    {\n        $product = Product::find($id);\n        $products = Product::where('product_id', '!=', $id)->take(5)->get();\n        return view('Product_files.product', ['product' => $product, 'products' => $products]);\n    }\n\n    public function addToBasket($id)\n    {\n        $product = Product::findOrFail($id);\n\n        $basket = session()->get('basket', []);\n\n        if (isset($basket[$id])){\n            $basket[$id]['quantity']++;\n\n        }else{\n            $basket[$id] = [\n                \"laptop_name\" => $product->product_name,\n//                \"image_path\" => $product->images\n                  \"price\" => $product->price,\n                \"quantity\" => 1\n                ];\n        }\n\n        session()->put('basket', $basket);\n        return redirect()->back()->with('success', 'Item has been added to basket');\n    }\n\n}\n\n\n
===================================================================
diff --git a/Valhalla/app/Http/Controllers/Product/ProductController.php b/Valhalla/app/Http/Controllers/Product/ProductController.php
--- a/Valhalla/app/Http/Controllers/Product/ProductController.php	
+++ b/Valhalla/app/Http/Controllers/Product/ProductController.php	
@@ -124,7 +124,6 @@
         $products = Product::where('product_id', '!=', $id)->take(5)->get();
         return view('Product_files.product', ['product' => $product, 'products' => $products]);
     }
-
     public function addToBasket($id)
     {
         $product = Product::findOrFail($id);
